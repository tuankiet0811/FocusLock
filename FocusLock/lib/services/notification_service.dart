import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:shared_preferences/shared_preferences.dart'; // Th√™m import n√†y
import '../utils/constants.dart';
import '../utils/helpers.dart';

class NotificationService {
  static final NotificationService _instance = NotificationService._internal();
  factory NotificationService() => _instance;
  NotificationService._internal();

  final FlutterLocalNotificationsPlugin _notifications = FlutterLocalNotificationsPlugin();
  
  // Th√™m c√°c bi·∫øn instance b·ªã thi·∫øu
  bool _isProgressNotificationShown = false;
  int? _lastProgressPercentage;

  Future<void> init() async {
    const androidSettings = AndroidInitializationSettings('@mipmap/ic_launcher');
    const iosSettings = DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
    );
    
    const initSettings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings,
    );
  
    await _notifications.initialize(initSettings);
    await _requestNotificationPermission();
    await _createNotificationChannels();
  }

  Future<void> _requestNotificationPermission() async {
    final androidImplementation = _notifications.resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>();
    
    if (androidImplementation != null) {
      final bool? granted = await androidImplementation.requestNotificationsPermission();
      // X√≥a print statement ƒë·ªÉ tr√°nh warning
      if (granted != null && granted) {
        // Permission granted
      }
    }
  }

  Future<void> _createNotificationChannels() async {
    const focusChannel = AndroidNotificationChannel(
      AppConstants.focusChannelId,
      'Focus Sessions',
      description: 'Th√¥ng b√°o v·ªÅ phi√™n t·∫≠p trung',
      importance: Importance.high,
      playSound: true,
      enableVibration: true,
    );
  
    const appBlockedChannel = AndroidNotificationChannel(
      AppConstants.appBlockedChannelId,
      'App Blocked',
      description: 'Th√¥ng b√°o khi ·ª©ng d·ª•ng b·ªã ch·∫∑n',
      importance: Importance.max,
      playSound: true,
      enableVibration: true,
    );
  
    final androidImplementation = _notifications.resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>();
    
    if (androidImplementation != null) {
      await androidImplementation.createNotificationChannel(focusChannel);
      await androidImplementation.createNotificationChannel(appBlockedChannel);
    }
  }

  // Th√™m method ki·ªÉm tra settings
  Future<bool> _shouldShowNotification() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool('notifications_enabled') ?? true;
  }
  
  Future<bool> _shouldPlaySound() async {
    final prefs = await SharedPreferences.getInstance();
    final notificationsEnabled = prefs.getBool('notifications_enabled') ?? true;
    final soundEnabled = prefs.getBool('sound_enabled') ?? true;
    return notificationsEnabled && soundEnabled;
  }
  
  Future<bool> _shouldVibrate() async {
    final prefs = await SharedPreferences.getInstance();
    final notificationsEnabled = prefs.getBool('notifications_enabled') ?? true;
    final vibrationEnabled = prefs.getBool('vibration_enabled') ?? true;
    return notificationsEnabled && vibrationEnabled;
  }
  
  // C·∫≠p nh·∫≠t method showFocusStartNotification
  Future<void> showFocusStartNotification({
    required int durationMinutes,
    String? goal,
  }) async {
    // Ki·ªÉm tra xem c√≥ n√™n hi·ªÉn th·ªã th√¥ng b√°o kh√¥ng
    if (!await _shouldShowNotification()) {
      return; // Kh√¥ng hi·ªÉn th·ªã th√¥ng b√°o n·∫øu ƒë√£ t·∫Øt
    }
    
    final shouldPlaySound = await _shouldPlaySound();
    final shouldVibrate = await _shouldVibrate();
    
    final androidDetails = AndroidNotificationDetails(
      AppConstants.focusChannelId,
      'Focus Sessions',
      channelDescription: 'Th√¥ng b√°o v·ªÅ phi√™n t·∫≠p trung',
      showWhen: true,
      playSound: shouldPlaySound,
      enableVibration: shouldVibrate,
    );

    final iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: shouldPlaySound,
    );

    final details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    await _notifications.show(
      AppConstants.focusStartNotificationId,
      'Phi√™n t·∫≠p trung ƒë√£ b·∫Øt ƒë·∫ßu!',
      goal != null 
          ? 'M·ª•c ti√™u: $goal\nTh·ªùi gian: $durationMinutes ph√∫t'
          : 'Th·ªùi gian: $durationMinutes ph√∫t',
      details,
    );
  }
  
  // C·∫≠p nh·∫≠t method showFocusEndNotification
  Future<void> showFocusEndNotification({
    required int durationMinutes,
    required bool completed,
    String? goal,
  }) async {
    if (!await _shouldShowNotification()) {
      return;
    }
    
    final shouldPlaySound = await _shouldPlaySound();
    final shouldVibrate = await _shouldVibrate();
    
    final androidDetails = AndroidNotificationDetails(
      AppConstants.focusChannelId,
      'Focus Sessions',
      channelDescription: 'Th√¥ng b√°o v·ªÅ phi√™n t·∫≠p trung',
      showWhen: true,
      playSound: shouldPlaySound,
      enableVibration: shouldVibrate,
    );

    final iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: shouldPlaySound,
    );

    final details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    final title = completed 
        ? 'üéâ Ho√†n th√†nh phi√™n t·∫≠p trung!'
        : '‚è∏Ô∏è Phi√™n t·∫≠p trung ƒë√£ t·∫°m d·ª´ng';
    
    final body = goal != null 
        ? 'M·ª•c ti√™u: $goal\nTh·ªùi gian: $durationMinutes ph√∫t'
        : 'Th·ªùi gian: $durationMinutes ph√∫t';

    await _notifications.show(
      AppConstants.focusEndNotificationId,
      title,
      body,
      details,
    );
  }
  
  // C·∫≠p nh·∫≠t method showAppBlockedNotification
  Future<void> showAppBlockedNotification({
    required String appName,
    required int remainingMinutes,
  }) async {
    if (!await _shouldShowNotification()) {
      return;
    }
    
    final shouldPlaySound = await _shouldPlaySound();
    final shouldVibrate = await _shouldVibrate();
    
    final androidDetails = AndroidNotificationDetails(
      AppConstants.appBlockedChannelId,
      'App Blocked',
      channelDescription: 'Th√¥ng b√°o khi ·ª©ng d·ª•ng b·ªã ch·∫∑n',
      showWhen: true,
      playSound: shouldPlaySound,
      enableVibration: shouldVibrate,
    );

    final iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: false,
      presentSound: shouldPlaySound,
    );

    final details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    await _notifications.show(
      AppConstants.appBlockedNotificationId,
      'üö´ ·ª®ng d·ª•ng b·ªã ch·∫∑n',
      '$appName ƒë√£ b·ªã ch·∫∑n trong th·ªùi gian t·∫≠p trung\nC√≤n l·∫°i: $remainingMinutes ph√∫t',
      details,
    );
  }
  
  // Th√™m method n√†y ƒë·ªÉ settings_screen.dart c√≥ th·ªÉ g·ªçi
  Future<void> updateNotificationSettings() async {
    // Method n√†y c√≥ th·ªÉ ƒë·ªÉ tr·ªëng ho·∫∑c th·ª±c hi·ªán logic c·∫≠p nh·∫≠t n·∫øu c·∫ßn
    // Hi·ªán t·∫°i logic ki·ªÉm tra settings ƒë√£ ƒë∆∞·ª£c t√≠ch h·ª£p v√†o t·ª´ng method ri√™ng
  }

  Future<void> showMotivationalNotification({
    required double completionPercentage,
    required int remainingMinutes,
  }) async {
    // Ki·ªÉm tra xem c√≥ n√™n hi·ªÉn th·ªã th√¥ng b√°o kh√¥ng
    if (!await _shouldShowNotification()) {
      return;
    }
    
    final shouldPlaySound = await _shouldPlaySound();
    final shouldVibrate = await _shouldVibrate();
    
    final androidDetails = AndroidNotificationDetails(
      AppConstants.focusChannelId,
      'Focus Sessions',
      channelDescription: 'Th√¥ng b√°o v·ªÅ phi√™n t·∫≠p trung',
      showWhen: true,
      playSound: shouldPlaySound,
      enableVibration: shouldVibrate,
    );

    final iosDetails = DarwinNotificationDetails(
      presentAlert: false,
      presentBadge: false,
      presentSound: shouldPlaySound,
    );

    final details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    final emoji = _getMotivationalEmoji(completionPercentage);
    final message = _getMotivationalMessage(completionPercentage);

    await _notifications.show(
      AppConstants.focusStartNotificationId + 1,
      '$emoji $message',
      'C√≤n l·∫°i: $remainingMinutes ph√∫t',
      details,
    );
  }

  String _getMotivationalEmoji(double percentage) {
    if (percentage < 25) return 'üöÄ';
    if (percentage < 50) return 'üí™';
    if (percentage < 75) return 'üî•';
    if (percentage < 100) return 'üéØ';
    return 'üéâ';
  }

  String _getMotivationalMessage(double percentage) {
    if (percentage < 25) return 'B·∫Øt ƒë·∫ßu l√† b∆∞·ªõc quan tr·ªçng nh·∫•t!';
    if (percentage < 50) return 'B·∫°n ƒëang l√†m r·∫•t t·ªët! H√£y ti·∫øp t·ª•c!';
    if (percentage < 75) return 'ƒê√£ ƒë∆∞·ª£c m·ªôt n·ª≠a r·ªìi! C·ªë g·∫Øng l√™n!';
    if (percentage < 100) return 'G·∫ßn ho√†n th√†nh r·ªìi! ƒê·ª´ng b·ªè cu·ªôc!';
    return 'Tuy·ªát v·ªùi! B·∫°n ƒë√£ ho√†n th√†nh!';
  }

  Future<void> cancelAllNotifications() async {
    await _notifications.cancelAll();
  }

  Future<void> cancelNotification(int id) async {
    await _notifications.cancel(id);
  }

  Future<void> showFocusProgressNotification({
    required int remainingMinutes,
    required int remainingSeconds,
    required double completionPercentage,
    String? goal,
  }) async {
    // Ki·ªÉm tra xem c√≥ n√™n hi·ªÉn th·ªã th√¥ng b√°o kh√¥ng
    if (!await _shouldShowNotification()) {
      return;
    }
    
    final currentPercentage = completionPercentage.round();
    
    // Ch·ªâ hi·ªÉn th·ªã th√¥ng b√°o khi:
    // 1. L·∫ßn ƒë·∫ßu ti√™n (_isProgressNotificationShown = false)
    // 2. Ho·∫∑c khi % thay ƒë·ªïi ƒë√°ng k·ªÉ (m·ªói 10%)
    if (!_isProgressNotificationShown || 
        (_lastProgressPercentage != null && 
         (currentPercentage - _lastProgressPercentage!).abs() >= 10)) {
      
      final shouldPlaySound = await _shouldPlaySound();
      final shouldVibrate = await _shouldVibrate();
      
      final progressValue = completionPercentage.round();
      
      final androidDetails = AndroidNotificationDetails(
        AppConstants.focusChannelId,
        'Focus Sessions',
        channelDescription: 'Th√¥ng b√°o v·ªÅ phi√™n t·∫≠p trung',
        showWhen: false,
        ongoing: true,
        autoCancel: false,
        priority: Priority.low,
        importance: Importance.low,
        showProgress: true,
        maxProgress: 100,
        progress: progressValue,
        onlyAlertOnce: true,
        playSound: shouldPlaySound,
        enableVibration: shouldVibrate,
      );
    
      final iosDetails = DarwinNotificationDetails(
        presentAlert: false,
        presentBadge: false,
        presentSound: shouldPlaySound,
      );
    
      final details = NotificationDetails(
        android: androidDetails,
        iOS: iosDetails,
      );
    
      final timeText = remainingMinutes > 0 
          ? '${remainingMinutes}:${(remainingSeconds % 60).toString().padLeft(2, '0')}'
          : '${remainingSeconds}s';
      
      final title = goal != null 
          ? 'üéØ $goal'
          : '‚è∞ ƒêang t·∫≠p trung';
      
      final body = 'C√≤n l·∫°i: $timeText ‚Ä¢ ${completionPercentage.round()}% ho√†n th√†nh';

      await _notifications.show(
        AppConstants.focusProgressNotificationId,
        title,
        body,
        details,
      );
      
      // C·∫≠p nh·∫≠t flag v√† percentage
      _isProgressNotificationShown = true;
      _lastProgressPercentage = currentPercentage;
    }
  }

  // Method ƒë·ªÉ reset flag khi b·∫Øt ƒë·∫ßu session m·ªõi
  Future<void> startNewFocusSession() async {
    _isProgressNotificationShown = false;
    _lastProgressPercentage = null;
  }

  // Method h·ªßy th√¥ng b√°o
  Future<void> cancelFocusProgressNotification() async {
    await _notifications.cancel(AppConstants.focusProgressNotificationId);
    _isProgressNotificationShown = false;
    _lastProgressPercentage = null;
  }
}