import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import '../utils/constants.dart';

class NotificationService {
  static final NotificationService _instance = NotificationService._internal();
  factory NotificationService() => _instance;
  NotificationService._internal();

  final FlutterLocalNotificationsPlugin _notifications = FlutterLocalNotificationsPlugin();

  Future<void> init() async {
    const androidSettings = AndroidInitializationSettings('@mipmap/ic_launcher');
    const iosSettings = DarwinInitializationSettings();
    
    const initSettings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings,
    );

    await _notifications.initialize(initSettings);
    await _createNotificationChannels();
  }

  Future<void> _createNotificationChannels() async {
    // Focus Channel
    const focusChannel = AndroidNotificationChannel(
      AppConstants.focusChannelId,
      'Focus Sessions',
      description: 'Th√¥ng b√°o v·ªÅ phi√™n t·∫≠p trung',
    );

    // App Blocked Channel
    const appBlockedChannel = AndroidNotificationChannel(
      AppConstants.appBlockedChannelId,
      'App Blocked',
      description: 'Th√¥ng b√°o khi ·ª©ng d·ª•ng b·ªã ch·∫∑n',
    );

    await _notifications
        .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>()
        ?.createNotificationChannel(focusChannel);

    await _notifications
        .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>()
        ?.createNotificationChannel(appBlockedChannel);
  }

  Future<void> showFocusStartNotification({
    required int durationMinutes,
    String? goal,
  }) async {
    const androidDetails = AndroidNotificationDetails(
      AppConstants.focusChannelId,
      'Focus Sessions',
      channelDescription: 'Th√¥ng b√°o v·ªÅ phi√™n t·∫≠p trung',
      showWhen: true,
    );

    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
    );

    const details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    await _notifications.show(
      AppConstants.focusStartNotificationId,
      'Phi√™n t·∫≠p trung ƒë√£ b·∫Øt ƒë·∫ßu!',
      goal != null 
          ? 'M·ª•c ti√™u: $goal\nTh·ªùi gian: $durationMinutes ph√∫t'
          : 'Th·ªùi gian: $durationMinutes ph√∫t',
      details,
    );
  }

  Future<void> showFocusEndNotification({
    required int durationMinutes,
    required bool completed,
    String? goal,
  }) async {
    const androidDetails = AndroidNotificationDetails(
      AppConstants.focusChannelId,
      'Focus Sessions',
      channelDescription: 'Th√¥ng b√°o v·ªÅ phi√™n t·∫≠p trung',
      showWhen: true,
    );

    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
    );

    const details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    final title = completed 
        ? 'üéâ Ho√†n th√†nh phi√™n t·∫≠p trung!'
        : '‚è∏Ô∏è Phi√™n t·∫≠p trung ƒë√£ t·∫°m d·ª´ng';
    
    final body = goal != null 
        ? 'M·ª•c ti√™u: $goal\nTh·ªùi gian: $durationMinutes ph√∫t'
        : 'Th·ªùi gian: $durationMinutes ph√∫t';

    await _notifications.show(
      AppConstants.focusEndNotificationId,
      title,
      body,
      details,
    );
  }

  Future<void> showAppBlockedNotification({
    required String appName,
    required int remainingMinutes,
  }) async {
    const androidDetails = AndroidNotificationDetails(
      AppConstants.appBlockedChannelId,
      'App Blocked',
      channelDescription: 'Th√¥ng b√°o khi ·ª©ng d·ª•ng b·ªã ch·∫∑n',
      showWhen: true,
    );

    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: false,
      presentSound: false,
    );

    const details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    await _notifications.show(
      AppConstants.appBlockedNotificationId,
      'üö´ ·ª®ng d·ª•ng b·ªã ch·∫∑n',
      '$appName ƒë√£ b·ªã ch·∫∑n trong th·ªùi gian t·∫≠p trung\nC√≤n l·∫°i: $remainingMinutes ph√∫t',
      details,
    );
  }

  Future<void> showMotivationalNotification({
    required double completionPercentage,
    required int remainingMinutes,
  }) async {
    const androidDetails = AndroidNotificationDetails(
      AppConstants.focusChannelId,
      'Focus Sessions',
      channelDescription: 'Th√¥ng b√°o v·ªÅ phi√™n t·∫≠p trung',
      showWhen: true,
    );

    const iosDetails = DarwinNotificationDetails(
      presentAlert: false,
      presentBadge: false,
      presentSound: false,
    );

    const details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    final emoji = _getMotivationalEmoji(completionPercentage);
    final message = _getMotivationalMessage(completionPercentage);

    await _notifications.show(
      AppConstants.focusStartNotificationId + 1,
      '$emoji $message',
      'C√≤n l·∫°i: $remainingMinutes ph√∫t',
      details,
    );
  }

  String _getMotivationalEmoji(double percentage) {
    if (percentage < 25) return 'üöÄ';
    if (percentage < 50) return 'üí™';
    if (percentage < 75) return 'üî•';
    if (percentage < 100) return 'üéØ';
    return 'üéâ';
  }

  String _getMotivationalMessage(double percentage) {
    if (percentage < 25) return 'B·∫Øt ƒë·∫ßu l√† b∆∞·ªõc quan tr·ªçng nh·∫•t!';
    if (percentage < 50) return 'B·∫°n ƒëang l√†m r·∫•t t·ªët! H√£y ti·∫øp t·ª•c!';
    if (percentage < 75) return 'ƒê√£ ƒë∆∞·ª£c m·ªôt n·ª≠a r·ªìi! C·ªë g·∫Øng l√™n!';
    if (percentage < 100) return 'G·∫ßn ho√†n th√†nh r·ªìi! ƒê·ª´ng b·ªè cu·ªôc!';
    return 'Tuy·ªát v·ªùi! B·∫°n ƒë√£ ho√†n th√†nh!';
  }

  Future<void> cancelAllNotifications() async {
    await _notifications.cancelAll();
  }

  Future<void> cancelNotification(int id) async {
    await _notifications.cancel(id);
  }
} 